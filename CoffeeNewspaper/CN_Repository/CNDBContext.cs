using CN_Core;
using Microsoft.EntityFrameworkCore;

namespace CN_Repository
{
    public class CNDbContext : DbContext
    {
        /// <summary>
        /// default dbfilename
        /// TODO:May change the config to configfile
        /// </summary>
        public const string dbfilename = "testing.db";
        #region DbSets 

        public DbSet<CNTag> Tags { get; set; }
        public DbSet<CNTask> Tasks { get; set; }
        public DbSet<CNMemo> Memos { get; set; }
        public DbSet<CNTimeSlice> TimeSlices { get; set; }
        public DbSet<CNTaskConnector> TaskConnectors { get; set; }
        public DbSet<CNMemoTagger> MemoTaggers { get; set; }
        public DbSet<CNTaskTagger> TaskTaggers { get; set; }
        public DbSet<CNTaskMemo> TaskMemos { get; set; }

        #endregion

        #region Constructor

        public CNDbContext(DbContextOptions<CNDbContext> options) : base(options)
        {

        }

        #endregion

        #region Configure the path

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder.UseSqlite($"Data Source={dbfilename}");
        }
        #endregion



        #region Model Creating

        /// <summary>
        /// Configures the database structure and relationships
        /// this config is purely for sqlite3 database
        /// </summary>
        /// <param name="modelBuilder"></param>
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            #region CNTask Config
            // Set Database Table name
            modelBuilder.Entity<CNTask>().ToTable(nameof(CNTask));
            // Set primary key for the Table ,this will also add a index to database
            modelBuilder.Entity<CNTask>().HasKey(a => a.TaskId);
            // Set primary key autogenerated for int value,it start from 0 and add 1 per item
            // for string value,it generate random guid
            modelBuilder.Entity<CNTask>().Property(x => x.TaskId).ValueGeneratedOnAdd();
            // Set Default CreateTime to now
            // Strictly require the ef code first to create the datatype of this field to DateTime
            modelBuilder.Entity<CNTask>().Property(x => x.CreateTime)
                .HasColumnType("DATETIME")
                .HasDefaultValueSql("strftime(\'%Y-%m-%d %H:%M:%f\',\'now\',\'localtime\')");
            
            modelBuilder.Entity<CNTask>().Property(x => x.TaskId).HasColumnType("INTEGER");
            modelBuilder.Entity<CNTask>().Property(x => x.Content).HasColumnType("VARCHAR");
            modelBuilder.Entity<CNTask>().Property(x => x.CreateTime).HasColumnType("DATETIME");
            modelBuilder.Entity<CNTask>().Property(x => x.DeadLine).HasColumnType("DATETIME");
            modelBuilder.Entity<CNTask>().Property(x => x.EndTime).HasColumnType("DATETIME");
            modelBuilder.Entity<CNTask>().Property(x => x.EstimatedDuration).HasColumnType("INTEGER");
            modelBuilder.Entity<CNTask>().Property(x => x.FailReason).HasColumnType("VARCHAR");
            modelBuilder.Entity<CNTask>().Property(x => x.IsDeleted).HasColumnType("BOOLEAN").HasDefaultValue(false);
            modelBuilder.Entity<CNTask>().Property(x => x.IsFail).HasColumnType("BOOLEAN").HasDefaultValue(false);
            modelBuilder.Entity<CNTask>().Property(x => x.ParentTaskID).HasColumnType("INTEGER");
            modelBuilder.Entity<CNTask>().Property(x => x.Priority).HasColumnType("INTEGER");
            modelBuilder.Entity<CNTask>().Property(x => x.Urgency).HasColumnType("INTEGER");
            modelBuilder.Entity<CNTask>().Property(x => x.Status).HasColumnType("INTEGER");
            modelBuilder.Entity<CNTask>().Property(x => x.StartTime).HasColumnType("DATETIME");
            // Set Tasks parentTask foreign key
            // a parent task may have many child tasks
            // so this is a one-too-many relation
            // database will use the ParentTaskID for the database field name
            // On delete Cascade means if the parent task is deleted ,the child tasks is also deleted
            // On delete ClientSetNull means if the parent task is deleted ,the child task's ParentTaskID field will be set null
            modelBuilder.Entity<CNTask>()
                .HasOne(x => x.ParentTask)
                .WithMany(y => y.ChildTasks)
                .HasForeignKey(z => z.ParentTaskID)
                .OnDelete(DeleteBehavior.ClientSetNull); 
            #endregion
            #region CNMemo Config

            modelBuilder.Entity<CNMemo>().ToTable(nameof(CNMemo));
            modelBuilder.Entity<CNMemo>().HasKey(a => a.MemoId);
            modelBuilder.Entity<CNMemo>().Property(x => x.MemoId).HasColumnType("VARCHAR");
            modelBuilder.Entity<CNMemo>().Property(x => x.Content).HasColumnType("VARCHAR");
            modelBuilder.Entity<CNMemo>().Property(x => x.Title).HasColumnType("VARCHAR");
            modelBuilder.Entity<CNMemo>().Property(x => x.MemoId).ValueGeneratedOnAdd(); 
            #endregion
            #region CNTag Config

            modelBuilder.Entity<CNTag>().ToTable(nameof(CNTag));
            modelBuilder.Entity<CNTag>().HasKey(a => a.TagId);
            modelBuilder.Entity<CNTag>().Property(x => x.TagId).HasColumnType("VARCHAR");
            modelBuilder.Entity<CNTag>().Property(x => x.Title).HasColumnType("VARCHAR");
            modelBuilder.Entity<CNTag>().Property(x => x.TagId).ValueGeneratedOnAdd();
            modelBuilder.Entity<CNTag>().HasIndex(x => x.Title).IsUnique(); 
            #endregion
            #region CNTimeSlice Config

            modelBuilder.Entity<CNTimeSlice>().ToTable(nameof(CNTimeSlice));
            modelBuilder.Entity<CNTimeSlice>().HasKey(a => a.TimeSliceId);
            modelBuilder.Entity<CNTimeSlice>().Property(x => x.TimeSliceId).HasColumnType("VARCHAR");
            modelBuilder.Entity<CNTimeSlice>().Property(x => x.StartDateTime).HasColumnType("DATETIME");
            modelBuilder.Entity<CNTimeSlice>().Property(x => x.EndDateTime).HasColumnType("DATETIME");
            modelBuilder.Entity<CNTimeSlice>().Property(x => x.TimeSliceId).ValueGeneratedOnAdd();
            modelBuilder.Entity<CNTimeSlice>()
                .HasOne(x => x.Task)
                .WithMany(y => y.UsedTimeSlices)
                .HasForeignKey(x => x.TaskId)
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired(); 
            #endregion
            #region CNTaskConnector Config


            modelBuilder.Entity<CNTaskConnector>().ToTable(nameof(CNTaskConnector));
            modelBuilder.Entity<CNTaskConnector>().HasKey(a => a.TaskConnectorId);
            modelBuilder.Entity<CNTaskConnector>().Property(x => x.TaskConnectorId).HasColumnType("VARCHAR");
            modelBuilder.Entity<CNTaskConnector>().Property(x => x.TaskConnectorId).ValueGeneratedOnAdd();
            modelBuilder.Entity<CNTaskConnector>().HasOne(x => x.PreTask)
                .WithMany(y => y.PreTaskConnectors)
                .HasForeignKey(z => z.PreTaskId)
                .IsRequired()
                .OnDelete(DeleteBehavior.Cascade);
            modelBuilder.Entity<CNTaskConnector>().HasOne(x => x.SufTask)
                .WithMany(y => y.SufTaskConnectors)
                .HasForeignKey(z => z.SufTaskId)
                .IsRequired()
                .OnDelete(DeleteBehavior.Cascade);
            modelBuilder.Entity<CNTaskConnector>()
                .HasIndex(p => new { p.PreTaskId, p.SufTaskId })
                .IsUnique(); 
            #endregion
            #region CNMemoTagger Config

            modelBuilder.Entity<CNMemoTagger>().ToTable(nameof(CNMemoTagger));
            modelBuilder.Entity<CNMemoTagger>().HasKey(a => a.MemoTaggerId);
            modelBuilder.Entity<CNMemoTagger>().Property(x => x.MemoTaggerId).HasColumnType("VARCHAR");
            modelBuilder.Entity<CNMemoTagger>().Property(x => x.TagId).HasColumnType("VARCHAR");
            modelBuilder.Entity<CNMemoTagger>().Property(x => x.MemoId).HasColumnType("VARCHAR");
            modelBuilder.Entity<CNMemoTagger>().Property(x => x.MemoTaggerId).ValueGeneratedOnAdd();
            modelBuilder.Entity<CNMemoTagger>()
                .HasOne(x => x.Memo)
                .WithMany(y => y.MemoTaggers)
                .HasForeignKey(z => z.MemoId)
                .IsRequired()
                .OnDelete(DeleteBehavior.Cascade);
            modelBuilder.Entity<CNMemoTagger>()
                .HasOne(x => x.Tag)
                .WithMany(y => y.MemoTaggers)
                .HasForeignKey(z => z.TagId)
                .IsRequired()
                .OnDelete(DeleteBehavior.Cascade);
            modelBuilder.Entity<CNMemoTagger>()
                .HasIndex(p => new { p.TagId, p.MemoId })
                .IsUnique(); 
            #endregion
            #region CNTaskTagger Config

            modelBuilder.Entity<CNTaskTagger>().ToTable(nameof(CNTaskTagger));
            modelBuilder.Entity<CNTaskTagger>().HasKey(a => a.TaskTaggerId);
            modelBuilder.Entity<CNTaskTagger>().Property(x => x.TaskTaggerId).HasColumnType("VARCHAR");
            modelBuilder.Entity<CNTaskTagger>().Property(x => x.TagId).HasColumnType("VARCHAR");
            modelBuilder.Entity<CNTaskTagger>().Property(x => x.TaskTaggerId).ValueGeneratedOnAdd();
            modelBuilder.Entity<CNTaskTagger>()
                .HasOne(x => x.Task)
                .WithMany(y => y.TaskTaggers)
                .HasForeignKey(z => z.TaskId)
                .IsRequired()
                .OnDelete(DeleteBehavior.Cascade);
            modelBuilder.Entity<CNTaskTagger>()
                .HasOne(x => x.Tag)
                .WithMany(y => y.TaskTaggers)
                .HasForeignKey(z => z.TagId)
                .IsRequired()
                .OnDelete(DeleteBehavior.Cascade);
            modelBuilder.Entity<CNTaskTagger>()
                .HasIndex(p => new { p.TagId, p.TaskId })
                .IsUnique(); 
            #endregion

            #region CNTaskMemo Config

            modelBuilder.Entity<CNTaskMemo>().ToTable(nameof(CNTaskMemo));
            modelBuilder.Entity<CNTaskMemo>().HasKey(a => a.TaskMemoId);
            modelBuilder.Entity<CNTaskMemo>().Property(x => x.TaskMemoId).HasColumnType("VARCHAR");
            modelBuilder.Entity<CNTaskMemo>().Property(x => x.MemoId).HasColumnType("VARCHAR");
            modelBuilder.Entity<CNTaskMemo>().Property(x => x.TaskMemoId).ValueGeneratedOnAdd();
            modelBuilder.Entity<CNTaskMemo>()
                .HasOne(x => x.Task)
                .WithMany(y => y.TaskMemos)
                .HasForeignKey(z => z.TaskId)
                .IsRequired()
                .OnDelete(DeleteBehavior.Cascade);
            modelBuilder.Entity<CNTaskMemo>()
                .HasOne(x => x.Memo)
                .WithMany(y => y.TaskMemos)
                .HasForeignKey(z => z.MemoId)
                .IsRequired()
                .OnDelete(DeleteBehavior.Cascade);
            modelBuilder.Entity<CNTaskMemo>()
                .HasIndex(p => new { p.TaskId, p.MemoId })
                .IsUnique(); 
            #endregion

            // TODO: Set up limits
            //modelBuilder.Entity<LoginCredentialsDataModel>().Property(a => a.FirstName).HasMaxLength(50);
        }

        #endregion

    }
}
